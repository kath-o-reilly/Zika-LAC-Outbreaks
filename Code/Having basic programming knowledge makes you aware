Having basic programming knowledge makes you aware of for loops and the for each package is based on this methodology, making it easy to use. The foreach package also need doParallel package to make the process parallel using the registerDoParallel() function. The starting code looks like this 






1
2
3
4
library(foreach)
library(doParallel)
 
registerDoParallel(makeCluster(no_cores))



Once this is done, I can execute commands using the foreach() function and do them in parallel using the %dopar% command. The foreach() function includes a parameter .combine which is used to specify the kind of output needed. Using .combine=c gives a vector output while .combine=rbind creates a matrix. If a list output is needed similar to lapply(), we can set .combine=list. We can also obtain dataframe using .combine=data.frame 

#Vector output
foreach(exponent = 1:5, .combine = c)  %dopar%  base^exponent
 
[1]   3   9  27  81 243
 
#Matrix output
foreach(exponent = 1:5, .combine = rbind)  %dopar%  base^exponent
 
         [,1]
result.1    3
result.2    9
result.3   27
result.4   81
result.5  243
 
 
#List output
foreach(exponent = 1:5, .combine = list, .multicombine=TRUE)  %dopar%  base^exponent
 
[[1]]
[1] 3
 
[[2]]
[1] 9
 
[[3]]
[1] 27
 
[[4]]
[1] 81
 
[[5]]
[1] 243
 
#Data Frame output
foreach(exponent = 1:5, .combine = data.frame)  %dopar%  base^exponent
  result.1 result.2 result.3 result.4 result.5
1        2        4        8       16       32
 
stopImplicitCluster()
